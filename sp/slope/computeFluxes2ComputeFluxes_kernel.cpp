//
// auto-generated by op2.py
//

//user function
#include "../computeFluxes2ComputeFluxes.h"

// host stub function
void op_par_loop_computeFluxes2ComputeFluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(24);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  computeFluxes2ComputeFluxes");
  }

  op_mpi_halo_exchanges(set, nargs, args);
  // set number of threads
  #ifdef _OPENMP
    int nthreads = omp_get_max_threads();
  #else
    int nthreads = 1;
  #endif

  if (set->size >0) {

    // execute plan
    #pragma omp parallel for
    for ( int thr=0; thr<nthreads; thr++ ){
      int start  = (set->size* thr)/nthreads;
      int finish = (set->size*(thr+1))/nthreads;
      for ( int n=start; n<finish; n++ ){
        computeFluxes2ComputeFluxes(
          &((float*)arg0.data)[1*n],
          &((float*)arg1.data)[2*n],
          &((float*)arg2.data)[4*n],
          &((float*)arg3.data)[4*n],
          &((float*)arg4.data)[3*n],
          &((float*)arg5.data)[1*n]);
      }
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[24].name      = name;
  OP_kernels[24].count    += 1;
  OP_kernels[24].time     += wall_t2 - wall_t1;
  OP_kernels[24].transfer += (float)set->size * arg0.size;
  OP_kernels[24].transfer += (float)set->size * arg1.size;
  OP_kernels[24].transfer += (float)set->size * arg2.size;
  OP_kernels[24].transfer += (float)set->size * arg3.size;
  OP_kernels[24].transfer += (float)set->size * arg4.size * 2.0f;
  OP_kernels[24].transfer += (float)set->size * arg5.size * 2.0f;
}


// host stub function
void op_par_loop_computeFluxes2ComputeFluxes_slope(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  tile_t* tile){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  int tileLoopSize;

  // initialise timers
  // double cpu_t1, cpu_t2, wall_t1, wall_t2;
  // op_timing_realloc(3);
  // op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  computeFluxes2ComputeFluxes");
  }

  op_mpi_halo_exchanges(set, nargs, args);
  // set number of threads
  sl_timers_core(&(sl_kernels[3].cpu_t1[omp_get_thread_num()]), &(sl_kernels[3].wall_t1[omp_get_thread_num()]));


  if (set->size >0) {

    iterations_list& iterations_3 = tile_get_iterations (tile, 3);
    tileLoopSize = tile_loop_size (tile, 3);

    // execute plan
  for (int k = 0; k < tileLoopSize; k++) {

    int n = iterations_3[k];

      computeFluxes2ComputeFluxes(
        &((float*)arg0.data)[1*n],
        &((float*)arg1.data)[2*n],
        &((float*)arg2.data)[4*n],
        &((float*)arg3.data)[4*n],
        &((float*)arg4.data)[3*n],
        &((float*)arg5.data)[1*n]);
    }
  }
  

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  sl_kernels[3].name      = name;
  sl_timers_core(&(sl_kernels[3].cpu_t2[omp_get_thread_num()]), &(sl_kernels[3].wall_t2[omp_get_thread_num()]));
  sl_kernels[3].counts[omp_get_thread_num()]    += 1;
  sl_kernels[3].times[omp_get_thread_num()]     += sl_kernels[3].wall_t2[omp_get_thread_num()] - sl_kernels[3].wall_t1[omp_get_thread_num()];
 

  // update kernel record
  // op_timers_core(&cpu_t2, &wall_t2);
  // OP_kernels[24].name      = name;
  // OP_kernels[24].count    += 1;
  // OP_kernels[24].time     += wall_t2 - wall_t1;
  // OP_kernels[24].transfer += (float)set->size * arg0.size;
  // OP_kernels[24].transfer += (float)set->size * arg1.size;
  // OP_kernels[24].transfer += (float)set->size * arg2.size;
  // OP_kernels[24].transfer += (float)set->size * arg3.size;
  // OP_kernels[24].transfer += (float)set->size * arg4.size * 2.0f;
  // OP_kernels[24].transfer += (float)set->size * arg5.size * 2.0f;
}
