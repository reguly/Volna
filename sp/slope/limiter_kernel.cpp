//
// auto-generated by op2.py
//

//user function
#include "../limiter.h"

void op_par_loop_limiter(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(22);
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 1;
  int  inds[8] = {-1,-1,-1,-1,0,0,0,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: limiter\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_22
    int part_size = OP_PART_SIZE_22;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    op_plan *Plan = op_plan_get_stage_upload(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_ALL,0);

    // execute plan
    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
          int map4idx = arg4.map_data[n * arg4.map->dim + 0];
          int map5idx = arg4.map_data[n * arg4.map->dim + 1];
          int map6idx = arg4.map_data[n * arg4.map->dim + 2];


          limiter(
            &((float*)arg0.data)[8 * n],
            &((float*)arg1.data)[4 * n],
            &((float*)arg2.data)[4 * n],
            &((float*)arg3.data)[8 * n],
            &((float*)arg4.data)[2 * map4idx],
            &((float*)arg4.data)[2 * map5idx],
            &((float*)arg4.data)[2 * map6idx],
            &((float*)arg7.data)[2 * n]);
        }
      }

      block_offset += nblocks;
    }
    OP_kernels[22].transfer  += Plan->transfer;
    OP_kernels[22].transfer2 += Plan->transfer2;
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[22].name      = name;
  OP_kernels[22].count    += 1;
  OP_kernels[22].time     += wall_t2 - wall_t1;
}


// host stub function
void op_par_loop_limiter_slope(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  tile_t* tile){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  int tileLoopSize;

  // initialise timers
  // double cpu_t1, cpu_t2, wall_t1, wall_t2;
  // op_timing_realloc(22);
  // op_timers_core(&cpu_t1, &wall_t1);
  sl_timers_core(&(sl_kernels[1].cpu_t1[omp_get_thread_num()]), &(sl_kernels[1].wall_t1[omp_get_thread_num()]));


  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    iterations_list& lc2e_1 = tile_get_local_map (tile, 1, "sl_cellsToEdges");
    iterations_list& iterations_1 = tile_get_iterations (tile, 1);
    tileLoopSize = tile_loop_size (tile, 1);

    //#pragma omp simd simdlen(SIMD_VEC)
    //#pragma ivdep
    //#pragma omp simd
    for (int k = 0; k < tileLoopSize; k++) {

      int map4idx = lc2e_1[k * N_NODESPERCELL + 0];
      int map5idx = lc2e_1[k * N_NODESPERCELL + 1];
      int map6idx = lc2e_1[k * N_NODESPERCELL + 2];
      int n = iterations_1[k];

      limiter(
            &((float*)arg0.data)[8 * n],
            &((float*)arg1.data)[4 * n],
            &((float*)arg2.data)[4 * n],
            &((float*)arg3.data)[8 * n],
            &((float*)arg4.data)[2 * map4idx],
            &((float*)arg4.data)[2 * map5idx],
            &((float*)arg4.data)[2 * map6idx],
            &((float*)arg7.data)[2 * n]);

    }



    // execute plan
    /*int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
          int map4idx = arg4.map_data[n * arg4.map->dim + 0];
          int map5idx = arg4.map_data[n * arg4.map->dim + 1];
          int map6idx = arg4.map_data[n * arg4.map->dim + 2];


          limiter(
            &((float*)arg0.data)[8 * n],
            &((float*)arg1.data)[4 * n],
            &((float*)arg2.data)[4 * n],
            &((float*)arg3.data)[8 * n],
            &((float*)arg4.data)[2 * map4idx],
            &((float*)arg4.data)[2 * map5idx],
            &((float*)arg4.data)[2 * map6idx],
            &((float*)arg7.data)[2 * n]);
        }
      }

      block_offset += nblocks;
    }
    OP_kernels[22].transfer  += Plan->transfer;
    OP_kernels[22].transfer2 += Plan->transfer2;
    */
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  sl_kernels[1].name      = name;
  sl_timers_core(&(sl_kernels[0].cpu_t2[omp_get_thread_num()]), &(sl_kernels[1].wall_t2[omp_get_thread_num()]));
  sl_kernels[1].counts[omp_get_thread_num()]    += 1;
  sl_kernels[1].times[omp_get_thread_num()]     += sl_kernels[1].wall_t2[omp_get_thread_num()] - sl_kernels[1].wall_t1[omp_get_thread_num()];
 
  // op_timers_core(&cpu_t2, &wall_t2);
  // if(omp_get_thread_num() == TID) {
  //   OP_kernels[22].name      = name;
  //   OP_kernels[22].count    += 1;
  //   OP_kernels[22].time     += wall_t2 - wall_t1;
  // }
}

// host stub function
void op_par_loop_limiter_slope_1(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  tile_t* tile){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  int tileLoopSize;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(22);
  op_timers_core(&cpu_t1, &wall_t1);

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    iterations_list& lc2e_1 = tile_get_local_map (tile, 1, "sl_cellsToEdges");
    iterations_list& iterations_1 = tile_get_iterations (tile, 1);
    tileLoopSize = tile_loop_size (tile, 1);

    //#pragma omp simd simdlen(SIMD_VEC)
    //#pragma ivdep
    //#pragma omp simd
    for (int k = 0; k < tileLoopSize; k++) {

      int map4idx = lc2e_1[k * N_NODESPERCELL + 0];
      int map5idx = lc2e_1[k * N_NODESPERCELL + 1];
      int map6idx = lc2e_1[k * N_NODESPERCELL + 2];
      int n = iterations_1[k];

      limiter(
            &((float*)arg0.data)[8 * n],
            &((float*)arg1.data)[4 * n],
            &((float*)arg2.data)[4 * n],
            &((float*)arg3.data)[8 * n],
            &((float*)arg4.data)[2 * map4idx],
            &((float*)arg4.data)[2 * map5idx],
            &((float*)arg4.data)[2 * map6idx],
            &((float*)arg7.data)[2 * n]);

    }



    // execute plan
    /*int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
          int map4idx = arg4.map_data[n * arg4.map->dim + 0];
          int map5idx = arg4.map_data[n * arg4.map->dim + 1];
          int map6idx = arg4.map_data[n * arg4.map->dim + 2];


          limiter(
            &((float*)arg0.data)[8 * n],
            &((float*)arg1.data)[4 * n],
            &((float*)arg2.data)[4 * n],
            &((float*)arg3.data)[8 * n],
            &((float*)arg4.data)[2 * map4idx],
            &((float*)arg4.data)[2 * map5idx],
            &((float*)arg4.data)[2 * map6idx],
            &((float*)arg7.data)[2 * n]);
        }
      }

      block_offset += nblocks;
    }
    OP_kernels[22].transfer  += Plan->transfer;
    OP_kernels[22].transfer2 += Plan->transfer2;
    */
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  if(omp_get_thread_num() == TID) {
    OP_kernels[22].name      = name;
    OP_kernels[22].count    += 1;
    OP_kernels[22].time     += wall_t2 - wall_t1;
  }
}

