//
// auto-generated by op2.py
//

//user function
#include "../gatherLocations.h"

// host stub function
void op_par_loop_gatherLocations(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  name = "gatherLocations";
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(20);
  OP_kernels[20].name      = name;
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 1;
  int  inds[2] = {0,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: gatherLocations\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_20
    int part_size = OP_PART_SIZE_20;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

    op_plan *Plan = op_plan_get_stage_upload(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_ALL,0);

    // execute plan
    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
          int map0idx = arg0.map_data[n * arg0.map->dim + 0];


          gatherLocations(
            &((float*)arg0.data)[4 * map0idx],
            &((float*)arg1.data)[5 * n]);
        }
      }

      block_offset += nblocks;
    }
    OP_kernels[20].transfer  += Plan->transfer;
    OP_kernels[20].transfer2 += Plan->transfer2;
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[20].count    += 1;
  OP_kernels[20].time     += wall_t2 - wall_t1;
}
